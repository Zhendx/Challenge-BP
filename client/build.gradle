import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.9.0'
	id 'info.solidsoft.pitest' version '1.9.0'
}

def packageName = "com.business.banking.client"
def dirName = "com/business/banking/client"

springBoot {
	mainClass = "${packageName}.ClientApplication"
}

apply plugin: "java"

group = "${packageName}"
version = '1.0.1'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext["log4j2.version"] = "2.21.1"

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = "1.5.5.Final"
	lombokVersion = "1.18.30"
}

dependencies {
	implementation 'org.projectlombok:lombok:1.18.22'
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	//dependency Base
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.3'

	//dependencies for default
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-ui', version: '1.7.0'

	// Mapstruct
	implementation group: "org.mapstruct", name: "mapstruct", version: "1.5.3.Final"
	annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: "1.5.3.Final"
	compileOnly group: "org.projectlombok", name: "lombok", version: ""

	// Kafka
	implementation 'org.apache.kafka:kafka-clients:3.8.1'

	// Database
	implementation 'org.postgresql:r2dbc-postgresql:1.0.2.RELEASE'
	implementation 'io.r2dbc:r2dbc-spi'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	testImplementation 'io.r2dbc:r2dbc-h2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//test
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "io.projectreactor:reactor-test"
	testImplementation "org.junit.jupiter:junit-jupiter-engine"
	testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	//pitest
	testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.0'
	testImplementation 'org.pitest:pitest-junit5-plugin:1.2.0'
}

tasks.register('buildSpringServer', GenerateTask) {
	generatorName = "spring"
	templateDir ="$rootDir/src/main/resources/openapi-templates"
	inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
	outputDir = "$buildDir/generated".toString()
	apiPackage = "${packageName}.infrastructure.input.adapter.rest"
	modelPackage = "${packageName}.infrastructure.input.adapter.rest.models"
	library = "spring-boot"
	configOptions = [
			skipDefaultInterface                    : "true",
			useSpringBoot3                          : "true",
			useJakartaEe                            : "true",
			serializableModel                       : "true",
			dateLibrary                             : "java8",
			openApiNullable                         : "false",
			reactive                                : "true",
			apiFirst                                : "false",
			delegatePattern                         : "false",
			configPackage                           : "${packageName}.config",
			sourceFolder                            : "src/main/java",
			basePackage                             : "${packageName}",
			disallowAdditionalPropertiesIfNotPresent: "true",
			interfaceOnly                           : "true"
	]
}

tasks.register('createUnitTest', JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "com.business.test.core.ProcessMain"
}

compileJava {
	dependsOn buildSpringServer
	options.compilerArgs += [
			"-Amapstruct.suppressGeneratorTimestamp=true",
			"-Amapstruct.suppressGeneratorVersionInfoComment=true",
			"-Amapstruct.verbose=true",
			"-Amapstruct.defaultComponentModel=spring"
	]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot{
	buildInfo()
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		xml.destination file("$buildDir/jacoco/test.xml")
		html.destination file("$buildDir/jacoco/index.html")
		html.required = true
		csv.required = true
	}
}

pitest {
	targetClasses = [
			"${packageName}.application.*",
			"${packageName}.infrastructure.*"
	]
	excludedClasses = [
			"${packageName}.domain.*"
	]
	pitestVersion = '1.9.0'
	threads = 4
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
}


